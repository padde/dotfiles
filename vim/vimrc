set nocompatible               " We're running Vim, not Vi!
set number
set noshowmatch
set wrap
set visualbell
set laststatus=2               " always show the statusline
set encoding=utf-8             " utf-8 ftw!

set nohidden                   " do not store data about old buffers

set expandtab                  " i like soft tabs
set shiftwidth=2
set softtabstop=2

set wildmenu                   " complete all the commands!
set wildmode=list:longest,full

set mouse=a                    " mouse support

runtime macros/matchit.vim     " Needed for textobj-rubyblock

filetype off                   " set filetype off for pathogen
call pathogen#infect()         " use pathogen

let g:NERDTreeChDirMode=2      " enable running commands in current dir

syntax on                      " Enable syntax highlighting
filetype on                    " Enable filetype detection
filetype indent on             " Enable filetype-specific indenting
filetype plugin on             " Enable filetype-specific plugins

set guifont=Menlo\ Regular:h12 " prettier font for MacVim

if has("gui_running")          " use railscasts theme in MacVim
  colorscheme railscasts
endif

let mapleader = ","            " Nobody likes \ as leader!

if has('mac')                  " Share clipboard on osx
  set clipboard+=unnamed
endif

if has("gui_running")          " hide menu bar in MacVim
  set guioptions=egmrt
endif

" aliases
command Wsudo :w !sudo tee %
command WQ wq
command Wq wq
command W w
command Q q

" diff with last saved version
function! s:DiffWithSaved()
  let filetype=&ft
  diffthis
  vnew | r # | normal! 1Gdd
  diffthis
  exe "setlocal bt=nofile bh=wipe nobl noswf ro ft=" . filetype
endfunction
com! DiffSaved call s:DiffWithSaved()

" nerd tree shortcuts in gui
if has("gui_running") && has("mac")
  nnoremap <D-d>      :NERDTreeToggle<CR><C-w>p
  inoremap <D-d> <Esc>:NERDTreeToggle<CR><C-w>pa
  vnoremap <D-d> <Esc>:NERDTreeToggle<CR><C-w>pgv
endif

" show invisibles as in Text Mate (with improvements)
set listchars=tab:▸\ ,eol:¬,trail:·,extends:>,precedes:<
set list

" blank line indentation
command IndentBlankOn  :inoremap <CR> <CR>+<Esc>xa
command IndentBlankOff :inoremap <CR> <CR>
IndentBlankOn

" powerline
let g:Powerline_symbols = 'fancy'
